---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="DarkVectr - Cybersecurity Consulting for the Bold" />
    <meta name="theme-color" content="#121212" />
    <title>DarkVectr | Cybersecurity Consulting</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap"
    />
    <script>
      if (
        localStorage.theme === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
    <style>
      html { scroll-behavior: smooth; }
      .parallax-shape { transition: transform 0.2s ease-out; }
      body::before {
        content: "";
        position: fixed;
        inset: 0;
        background: radial-gradient(circle at center, rgba(16,185,129,0.2), transparent 70%);
        pointer-events: none;
        animation: pulseGradient 6s ease-in-out infinite;
      }
      @keyframes pulseGradient {
        0% { opacity: 0.2; transform: scale(1); }
        50% { opacity: 0.05; transform: scale(1.2); }
        100% { opacity: 0.2; transform: scale(1); }
      }
      :root {
        --glitch-offset-x: 8px;
        --glitch-offset-y: -8px;
        --glitch-skew-before: -5deg;
        --glitch-skew-middle: -3deg;
        --glitch-skew-after: 5deg;
        --glitch-hue-before: 10deg;
        --glitch-hue-after: -10deg;
        --glitch-opacity-before: 0.6;
        --glitch-opacity-after: 0.8;
        --glitch-stripe-light: 0.1;
        --glitch-stripe-thickness: 2px;
        --glitch-stripe-gap: 6px;
        --glitch-stripe-color: 255,255,255;
        --glitch-page-hue: 20deg;
        --glitch-page-contrast: 200%;
        --glitch-page-brightness: 1.2;
      }
      #glitch-overlay {
        position: fixed;
        inset: 0;
        pointer-events: none;
        z-index: 50;
        background: repeating-linear-gradient(
          45deg,
          rgba(var(--glitch-stripe-color),var(--glitch-stripe-light,0.1)),
          rgba(var(--glitch-stripe-color),var(--glitch-stripe-light,0.1)) var(--glitch-stripe-thickness,2px),
          transparent var(--glitch-stripe-thickness,2px),
          transparent calc(var(--glitch-stripe-thickness,2px) + var(--glitch-stripe-gap,6px))
        );
        opacity: 0;
      }
      #glitch-overlay::before,
      #glitch-overlay::after {
        content: '';
        position: absolute;
        inset: 0;
        background: inherit;
        opacity: 0;
      }
      #glitch-overlay.animate-glitch::before {
        animation: glitch-before 0.6s steps(2) forwards;
      }
      #glitch-overlay.animate-glitch::after {
        animation: glitch-after 0.6s steps(2) forwards;
      }
      @keyframes glitch-before {
  0%   { opacity: 0; transform: translate(0); filter: hue-rotate(var(--glitch-hue-before,10deg)); }
  20%  { opacity: var(--glitch-opacity-before,0.6); transform: translate(var(--glitch-offset-x,-8px), var(--glitch-offset-y,-8px)) skew(var(--glitch-skew-before,-5deg)); }
  40%  { opacity: calc(var(--glitch-opacity-before,0.6) / 2); transform: translate(calc(-1 * var(--glitch-offset-x,-8px)), calc(-1 * var(--glitch-offset-y,-8px))) skew(var(--glitch-skew-after,3deg)); }
  60%  { opacity: var(--glitch-opacity-before,0.6); transform: translate(calc(-0.5 * var(--glitch-offset-x,-8px)), calc(0.5 * var(--glitch-offset-y,-8px))) skew(var(--glitch-skew-middle,-3deg)); }
  80%  { opacity: calc(var(--glitch-opacity-before,0.6) / 2); transform: translate(var(--glitch-offset-x,-8px), calc(-0.5 * var(--glitch-offset-y,-8px))) skew(var(--glitch-skew-last,5deg)); }
  100% { opacity: 0; transform: translate(0); }
      }
      @keyframes glitch-after {
  0%   { opacity: 0; transform: translate(0); filter: hue-rotate(var(--glitch-hue-after,-10deg)); }
  20%  { opacity: var(--glitch-opacity-after,0.8); transform: translate(calc(var(--glitch-offset-x,8px)), calc(var(--glitch-offset-y,8px))) skew(var(--glitch-skew-after,5deg)); }
  40%  { opacity: calc(var(--glitch-opacity-after,0.8) / 2); transform: translate(calc(-1 * var(--glitch-offset-x,8px)), calc(-1 * var(--glitch-offset-y,8px))) skew(var(--glitch-skew-before,-5deg)); }
  60%  { opacity: var(--glitch-opacity-after,0.8); transform: translate(calc(0.5 * var(--glitch-offset-x,8px)), calc(-0.5 * var(--glitch-offset-y,8px))) skew(var(--glitch-skew-middle,3deg)); }
  80%  { opacity: calc(var(--glitch-opacity-after,0.8) / 2); transform: translate(calc(-0.5 * var(--glitch-offset-x,8px)), calc(0.5 * var(--glitch-offset-y,8px))) skew(var(--glitch-skew-last,-3deg)); }
  100% { opacity: 0; transform: translate(0); }
      }

      html.glitch-shake {
        filter: hue-rotate(var(--glitch-page-hue)) contrast(var(--glitch-page-contrast)) brightness(var(--glitch-page-brightness));
      }
      html.glitch-shake.animate-shake {
        animation: glitch-shake 0.5s steps(2) forwards;
      }
      @keyframes glitch-shake {
        0% { transform: translate(0); }
        25% { transform: translate(-6px, 6px) skewX(-3deg); }
        50% { transform: translate(6px, -6px) skewY(3deg); }
        75% { transform: translate(-6px, -6px) skew(-3deg); }
        100% { transform: translate(0); }
      }
@keyframes pixelate {
  0% { filter: none; transform: scale(1); image-rendering: auto; }
  50% { filter: blur(2px); transform: scale(0.9); image-rendering: pixelated; }
 100% { filter: none; transform: scale(1); image-rendering: auto; }
}
.animate-pixelate { animation: pixelate 0.8s steps(2) forwards; }
  /* matrix rain canvas overlay */
  #matrix-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 60;
    opacity: 0;
    transition: opacity 0.3s ease-out;
  }
    </style>
  </head>
  <body class="bg-background text-foreground font-sans">
    <Header />
    <main class="px-6 md:px-12 max-w-5xl mx-auto py-12">
      <slot />
    </main>
    <Footer />
    <div id="glitch-overlay"></div>
    <script>
      const htmlEl = document.documentElement;
      const toggle = document.getElementById("theme-toggle");
      const iconDark = document.getElementById("theme-icon-dark");
      toggle.addEventListener("click", () => {
        htmlEl.classList.toggle("dark");
        localStorage.theme = htmlEl.classList.contains("dark") ? "dark" : "light";
      });
    </script>
    <!-- Particle background and tilt effects -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/tsparticles@2/tsparticles.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vanilla-tilt@1.7.2/dist/vanilla-tilt.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Scroll-reveal with staggered delays
        const observer = new IntersectionObserver((entries, obs) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const animation = entry.target.dataset.animation || 'fadeIn';
              const delay = entry.target.dataset.delay || '0';
              entry.target.style.animationDelay = `${delay}ms`;
              entry.target.classList.add(`animate-${animation}`);
              obs.unobserve(entry.target);
            }
          });
        }, { threshold: 0.1 });
        document.querySelectorAll('.reveal').forEach((el, i) => {
          el.dataset.delay = i * 150;
          observer.observe(el);
        });

        // Initialize tilt on cards
        if (window.VanillaTilt) {
          VanillaTilt.init(document.querySelectorAll('[data-tilt]'), {
            max: 15,
            speed: 400,
            glare: true,
            'max-glare': 0.3,
            gyroscope: false
          });
        }

        // Initialize particles background
        const particlesContainer = document.getElementById('tsparticles');
        if (window.tsParticles && particlesContainer) {
          tsParticles.load(particlesContainer, {
            fpsLimit: 60,
            particles: {
              number: { value: 50 },
              color: { value: '#10b981' },
              shape: { type: 'circle' },
              opacity: { value: 0.2 },
              size: { value: { min: 1, max: 3 } },
              move: { enable: true, speed: 1, outModes: 'out' },
              links: { enable: true, distance: 150, color: '#10b981', opacity: 0.1, width: 1 }
            },
            interactivity: {
              detectsOn: 'canvas',
              events: {
                onHover: { enable: true, mode: 'grab' },
                onClick: { enable: true, mode: 'push' },
                resize: true
              },
              modes: {
                grab: { distance: 200, links: { opacity: 0.2 } },
                push: { quantity: 4 }
              }
            },
            detectRetina: true,
            background: { color: 'transparent' }
          });
        }

        // Parallax movement for hero background shapes
        const heroSection = document.getElementById('hero');
        if (heroSection) {
          const shapes = heroSection.querySelectorAll('.parallax-shape');
          heroSection.addEventListener('mousemove', e => {
            const { width, height, left, top } = heroSection.getBoundingClientRect();
            const x = ((e.clientX - left) / width - 0.5) * 2;
            const y = ((e.clientY - top) / height - 0.5) * 2;
            shapes.forEach(shape => {
              const speed = parseFloat(shape.dataset.speed) || 0;
              shape.style.transform = `translate(${x * speed}px, ${y * speed}px)`;
            });
          });
        }

        
        const navItems = document.querySelectorAll('header nav ul li');
        navItems.forEach((el, i) => {
          const animation = i % 2 === 0 ? 'slideInLeft' : 'slideInRight';
          setTimeout(() => {
            el.classList.remove('opacity-0');
            el.classList.add(`animate-${animation}`);
          }, 150 * i + 200);
        });

        
        const glitchEl = document.getElementById('glitch-overlay');
        const matrixEl = document.createElement('canvas');
        matrixEl.id = 'matrix-canvas';
        document.body.append(matrixEl);
        const mCtx = matrixEl.getContext('2d');
        function matrixEffect(duration = 800) {
          matrixEl.width = window.innerWidth;
          matrixEl.height = window.innerHeight;
          const cols = Math.floor(matrixEl.width / 20) + 1;
          const drops = Array(cols).fill(0);
          matrixEl.style.opacity = '1';
          const draw = () => {
            mCtx.fillStyle = 'rgba(0,0,0,0.05)';
            mCtx.fillRect(0, 0, matrixEl.width, matrixEl.height);
            mCtx.fillStyle = '#0f0';
            mCtx.font = '15px monospace';
            drops.forEach((y, i) => {
              const text = String.fromCharCode(0x30A0 + Math.random() * 96);
              mCtx.fillText(text, i * 20, y * 20);
              drops[i] = y * 20 > matrixEl.height || Math.random() > 0.975 ? 0 : y + 1;
            });
          };
          const timer = setInterval(draw, 50);
          setTimeout(() => {
            clearInterval(timer);
            matrixEl.style.opacity = '0';
            mCtx.clearRect(0, 0, matrixEl.width, matrixEl.height);
          }, duration);
        }
        (function glitchLoop() {
          const timeout = Math.random() * 6000 + 2000;
          setTimeout(() => {
            
            const root = document.documentElement;
            root.style.setProperty('--glitch-offset-x', `${(Math.random()*2-1)*10}px`);
            root.style.setProperty('--glitch-offset-y', `${(Math.random()*2-1)*10}px`);
            root.style.setProperty('--glitch-skew-before', `${(Math.random()*10-5).toFixed(2)}deg`);
            root.style.setProperty('--glitch-skew-middle', `${(Math.random()*10-5).toFixed(2)}deg`);
            root.style.setProperty('--glitch-skew-after', `${(Math.random()*10-5).toFixed(2)}deg`);
            root.style.setProperty('--glitch-hue-before', `${(Math.random()*40-20).toFixed(2)}deg`);
            root.style.setProperty('--glitch-hue-after', `${(Math.random()*40-20).toFixed(2)}deg`);
            root.style.setProperty('--glitch-opacity-before', `${(Math.random()*0.5+0.3).toFixed(2)}`);
            root.style.setProperty('--glitch-opacity-after', `${(Math.random()*0.5+0.3).toFixed(2)}`);
            
            root.style.setProperty('--glitch-page-hue', `${(Math.random()*360).toFixed(1)}deg`);
            root.style.setProperty('--glitch-page-contrast', `${(Math.random()*150+150).toFixed(0)}%`);
            root.style.setProperty('--glitch-page-brightness', `${(Math.random()*0.7+0.8).toFixed(2)}`);
            root.style.setProperty(
              '--glitch-stripe-color',
              `${Math.floor(Math.random()*256)},${Math.floor(Math.random()*256)},${Math.floor(Math.random()*256)}`
            );
            root.style.setProperty('--glitch-stripe-light', `${(Math.random()*0.4+0.1).toFixed(2)}`);
            root.style.setProperty('--glitch-stripe-thickness', `${Math.floor(Math.random()*6+1)}px`);
            root.style.setProperty('--glitch-stripe-gap', `${Math.floor(Math.random()*12+4)}px`);
            
            root.classList.add('glitch-shake', 'animate-shake');
            document.documentElement.addEventListener('animationend', () => {
              document.documentElement.classList.remove('animate-shake');
            }, { once: true });
            // random additional effect: matrix rain or pixelate
            const extra = Math.random();
            if (extra < 0.4) {
              matrixEffect(1000);
            } else if (extra < 0.8) {
              root.classList.add('animate-pixelate');
              root.addEventListener('animationend', () => {
                root.classList.remove('animate-pixelate');
              }, { once: true });
            }
            glitchEl.classList.add('animate-glitch');
            glitchEl.addEventListener('animationend', () => {
              glitchEl.classList.remove('animate-glitch');
              document.documentElement.classList.remove('glitch-shake');
            }, { once: true });
            glitchLoop();
          }, timeout);
        })();
      });
    </script>
  </body>
</html>
