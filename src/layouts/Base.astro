---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="DarkVectr - Cybersecurity Consulting for the Bold" />
    <meta name="theme-color" content="#121212" />
    <title>DarkVectr | Cybersecurity Consulting</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap"
    />
    <script>
      if (
        localStorage.theme === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
    <style>
      html { scroll-behavior: smooth; }
      .parallax-shape { transition: transform 0.2s ease-out; }
      body::before {
        content: "";
        position: fixed;
        inset: 0;
        background: radial-gradient(circle at center, rgba(16,185,129,0.2), transparent 70%);
        pointer-events: none;
        animation: pulseGradient 6s ease-in-out infinite;
      }
      @keyframes pulseGradient {
        0% { opacity: 0.2; transform: scale(1); }
        50% { opacity: 0.05; transform: scale(1.2); }
        100% { opacity: 0.2; transform: scale(1); }
      }
    </style>
  </head>
  <body class="bg-background text-foreground font-sans">
    <Header />
    <main class="px-6 md:px-12 max-w-5xl mx-auto py-12">
      <slot />
    </main>
    <Footer />
    <script>
      const htmlEl = document.documentElement;
      const toggle = document.getElementById("theme-toggle");
      const iconDark = document.getElementById("theme-icon-dark");
      toggle.addEventListener("click", () => {
        htmlEl.classList.toggle("dark");
        localStorage.theme = htmlEl.classList.contains("dark") ? "dark" : "light";
      });
    </script>
    <!-- Particle background and tilt effects -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/tsparticles@2/tsparticles.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vanilla-tilt@1.7.2/dist/vanilla-tilt.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Scroll-reveal with staggered delays
        const observer = new IntersectionObserver((entries, obs) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const animation = entry.target.dataset.animation || 'fadeIn';
              const delay = entry.target.dataset.delay || '0';
              entry.target.style.animationDelay = `${delay}ms`;
              entry.target.classList.add(`animate-${animation}`);
              obs.unobserve(entry.target);
            }
          });
        }, { threshold: 0.1 });
        document.querySelectorAll('.reveal').forEach((el, i) => {
          el.dataset.delay = i * 150;
          observer.observe(el);
        });

        // Initialize tilt on cards
        if (window.VanillaTilt) {
          VanillaTilt.init(document.querySelectorAll('[data-tilt]'), {
            max: 15,
            speed: 400,
            glare: true,
            'max-glare': 0.3,
            gyroscope: false
          });
        }

        // Initialize particles background
        const particlesContainer = document.getElementById('tsparticles');
        if (window.tsParticles && particlesContainer) {
          tsParticles.load(particlesContainer, {
            fpsLimit: 60,
            particles: {
              number: { value: 50 },
              color: { value: '#10b981' },
              shape: { type: 'circle' },
              opacity: { value: 0.2 },
              size: { value: { min: 1, max: 3 } },
              move: { enable: true, speed: 1, outModes: 'out' },
              links: { enable: true, distance: 150, color: '#10b981', opacity: 0.1, width: 1 }
            },
            interactivity: {
              detectsOn: 'canvas',
              events: {
                onHover: { enable: true, mode: 'grab' },
                onClick: { enable: true, mode: 'push' },
                resize: true
              },
              modes: {
                grab: { distance: 200, links: { opacity: 0.2 } },
                push: { quantity: 4 }
              }
            },
            detectRetina: true,
            background: { color: 'transparent' }
          });
        }

        // Parallax movement for hero background shapes
        const heroSection = document.getElementById('hero');
        if (heroSection) {
          const shapes = heroSection.querySelectorAll('.parallax-shape');
          heroSection.addEventListener('mousemove', e => {
            const { width, height, left, top } = heroSection.getBoundingClientRect();
            const x = ((e.clientX - left) / width - 0.5) * 2;
            const y = ((e.clientY - top) / height - 0.5) * 2;
            shapes.forEach(shape => {
              const speed = parseFloat(shape.dataset.speed) || 0;
              shape.style.transform = `translate(${x * speed}px, ${y * speed}px)`;
            });
          });
        }
      });
    </script>
  </body>
</html>
