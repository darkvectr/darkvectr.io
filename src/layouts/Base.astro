---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="DarkVectr - Cybersecurity Consulting for the Bold" />
    <meta name="theme-color" content="#0d1117" />
    <title>DarkVectr | Cybersecurity Consulting</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <script>
      if (
        localStorage.theme === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
    <style>html { scroll-behavior: smooth; }</style>
  </head>
  <body class="bg-background text-foreground font-sans">
    <Header />
    <main class="px-6 md:px-12 max-w-5xl mx-auto py-12">
      <slot />
    </main>
    <Footer />
    <script>
      const htmlEl = document.documentElement;
      const toggle = document.getElementById("theme-toggle");
      const iconLight = document.getElementById("theme-icon-light");
      const iconDark = document.getElementById("theme-icon-dark");
      function updateIcons() {
        if (htmlEl.classList.contains("dark")) {
          iconLight.classList.add("hidden");
          iconDark.classList.remove("hidden");
        } else {
          iconLight.classList.remove("hidden");
          iconDark.classList.add("hidden");
        }
      }
      toggle.addEventListener("click", () => {
        htmlEl.classList.toggle("dark");
        localStorage.theme = htmlEl.classList.contains("dark") ? "dark" : "light";
        updateIcons();
      });
      updateIcons();
    </script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const observer = new IntersectionObserver((entries, obs) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const animation = entry.target.dataset.animation || 'fadeIn';
              entry.target.classList.add(`animate-${animation}`);
              obs.unobserve(entry.target);
            }
          });
        }, { threshold: 0.1 });
        document.querySelectorAll('.reveal').forEach(el => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>
